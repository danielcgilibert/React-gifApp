{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAa5C,OAEI,sBAAMC,SATW,SAAAC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAKlB,SACA,uBACQO,KAAK,OACLC,MAAQT,EACRU,SAfe,SAAAP,GAAC,OAAKF,EAAcE,EAAEQ,OAAOF,a,+BCJ/CG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OADAc,QAAQC,IAAIN,EAAGC,EAAMV,GAEjB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,kCAAKA,GAAY,aAAjB,WCHCS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAK,GACLe,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KA0BxC,OApBAC,qBAAW,WAGP1B,EAASC,GACR0B,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,MAEd,UAMR,CAACtB,IAIIuB,EDxBwBM,CAAc7B,GAAjCa,EAFyB,EAE9BN,KAAae,EAFiB,EAEjBA,QAMpB,OACI,qCACA,6BAAKtB,IAEJsB,GAAS,oBAAIJ,UAAU,oBAAd,yBAER,qBAAKA,UAAU,YAAf,SAGML,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEDdmB,EAlBO,WAAO,IAAD,EACY5C,mBAAS,IADrB,mBACjBQ,EADiB,KACLT,EADK,KAGxB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAKA,6BACMS,EAAWe,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YCL7C+B,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.8d91a915.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange =  e  => setInputValue(e.target.value);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2 ){\r\n            setCategories(categories => [inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n     \r\n        <form onSubmit={handleSubmit}>\r\n        <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n  }\r\n","\r\n\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=H6Rm912Y7wCoRK61Sbd8rl50cDOCbfsM`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        } \r\n    })\r\n\r\n\r\n    return gifs;\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    console.log(id,title,url);\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p> {title?title:\"Sin Titulo\"} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n import { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n\r\n \r\n\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n\r\n        {loading&&<h2 className='animate__bounceIn'>Cargando...</h2>}\r\n\r\n        { <div className=\"card-grid\">\r\n                {\r\n                \r\n                images.map( img => (\r\n                    <GifGridItem  \r\n                    key={img.id}\r\n                    { ...img}\r\n                    />\r\n                ))    \r\n\r\n                }\r\n        </div> }\r\n        </>\r\n    )\r\n}\r\n","import {useState} from 'react'\r\nimport {useEffect} from 'react'\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n\r\n        getGifs( category )\r\n        .then( imgs => {\r\n            setTimeout( () => {\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                })\r\n            },3000)\r\n           \r\n        })\r\n\r\n\r\n\r\n    },[category])\r\n\r\n  \r\n\r\n    return state;\r\n\r\n\r\n}","import React ,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp =  ()  =>{\r\n    const [categories, setCategories] = useState([]);\r\n \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n\r\n\r\n\r\n            <ol>\r\n                { categories.map(category => <GifGrid key={ category } category={ category } />)}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport '../node_modules/animate.css/animate.min.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}